h2_uhp1 = GWAS_individual$h2_uhp1, h2_uhp2 = GWAS_individual$h2_uhp2,
h2_chp1 = GWAS_individual$h2_chp1, h2_chp2 = GWAS_individual$h2_chp2))
}
# wrap up
dgm6 = function(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1,
a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha,
a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1=1, q_uhp2=1,
q_chp1=0.1, q_chp2=0.1, beta_XU=1, beta_YU=1) {
GWAS_individual = dgm_individual_6(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1,
a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha,
a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1, q_uhp2,
q_chp1, q_chp2, beta_XU, beta_YU)
GWAS_summary = dgm_summary_6(GWAS_individual)
return(GWAS_summary)
}
m = 200
nx1 = 20000; nx2 = 80000
ny1 = 20000; ny2 = 80000
a_gamma1 = -0.3; b_gamma1 = 0.3; a_gamma2 = -0.3; b_gamma2 = 0.3
rho_gamma = 0.6
a_f = 0.1; b_f = 0.3
a_alpha1 = -0.1; b_alpha1 = 0.1; a_alpha2 = -0.1; b_alpha2 = 0.1
rho_alpha = 0.6
a_phi1 = -0.1; b_phi1 = 0.1; a_phi2 = -0.1; b_phi2 = 0.1
rho_eta = 0.9
# error_sd_exp = 1
theta1 = 0; theta2 = 0
q_uhp1 = 1; q_uhp2 = 1
q_chp1 = 0.1; q_chp2 = 0.1
p_cutoff = 1e-5
a_prior = 5
# generate summary statistics
GWAS_summary = dgm6(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1, a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha, a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1, q_uhp2, q_chp1, q_chp2, beta_XU=1, beta_YU=1)
GWAS_summary$h2_exposure1; GWAS_summary$h2_exposure2
GWAS_summary$h2_causal1; GWAS_summary$h2_causal2
GWAS_summary$h2_uhp1; GWAS_summary$h2_uhp2
GWAS_summary$h2_chp1; GWAS_summary$h2_chp2
b_exp = cbind(GWAS_summary$b_exp_1, GWAS_summary$b_exp_2)
b_out = cbind(GWAS_summary$b_out_1, GWAS_summary$b_out_2)
se_exp = cbind(GWAS_summary$se_exp_1, GWAS_summary$se_exp_2)
se_out = cbind(GWAS_summary$se_out_1, GWAS_summary$se_out_2)
devtools::load_all()
fusiomr(b_exp, b_out, se_exp, se_out)
se_exp
se_out
any(se_exp <= 0)
any(se_out <= 0)
fusiomr(b_exp, se_exp, b_out, se_out)
devtools::load_all()
fusiomr(b_exp, se_exp, b_out, se_out)
devtools::load_all()
fusiomr(b_exp, se_exp, b_out, se_out)
# function to generate a single population GWAS summary statistics
# all generated IVs are used. IV strength is controlled by a two-disjoint-interval uniform
# allow proportional CHP
dgm_individual_4 = function (m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1) {
# IV-to-exposure effect (not through U)
gamma = runif(m, a_gamma, b_gamma)
# MAF
f = runif(m, a_f, b_f)
# Genotypes in [0, 1, 2], m x n
gx = replicate(nx, rbinom(n = m, size = 2, prob = f))
gy = replicate(ny, rbinom(n = m, size = 2, prob = f))
# for each row (snp), standardize genotype
gx = t(apply(gx, 1, base::scale))
gy = t(apply(gy, 1, base::scale))
# a proportion of snps have UHP effect (q_uhp)
alpha = runif(m, a_alpha, b_alpha)
valid_ids = sample(1:m, floor((1-q_uhp)*m))
alpha[valid_ids] = 0
# a proportion of snps have CHP effect (q_chp)
eta = rbinom(m, 1, q_chp)
ind_chp = which(eta == 1)
phi = rep(0, m)
phi[ind_chp] = runif(length(ind_chp), a_phi, b_phi)
# exposure and outcome
Ux = c(phi %*% gx) + rnorm(nx)
Uy = c(phi %*% gy) + rnorm(ny)
Xx = c(gamma %*% gx) + beta_XU * Ux + rnorm(nx)
Xy = c(gamma %*% gy) + beta_XU * Uy + rnorm(ny)
Y  = c(alpha %*% gy) + theta * Xy + beta_YU * Uy + rnorm(ny)
h2_exposure = var(c(gamma %*% gy))/var(Xy)
h2_causal = var(c(gamma %*% gy * theta))/var(Y)
h2_uhp = var(c(alpha %*% gy))/var(Y)
h2_chp = var(c(phi %*% gy * beta_YU))/var(Y)
# output
return(list(X = Xx, Y = Y, gx = gx, gy = gy, h2_exposure = h2_exposure,
h2_causal = h2_causal, h2_uhp = h2_uhp, h2_chp = h2_chp))
}
# generate summary statistics
dgm_summary_4 = function(GWAS_individual) {
gammaSS = fastSigLm(GWAS_individual$X, t(GWAS_individual$gx))
GammaSS = fastSigLm(GWAS_individual$Y, t(GWAS_individual$gy))
b_exp = gammaSS$coef; se_exp = gammaSS$std
b_out = GammaSS$coef; se_out = GammaSS$std
return(list(b_exp = b_exp, se_exp = se_exp, b_out = b_out, se_out = se_out,
h2_exposure = GWAS_individual$h2_exposure, h2_causal = GWAS_individual$h2_causal,
h2_uhp = GWAS_individual$h2_uhp, h2_chp = GWAS_individual$h2_chp))
}
# wrap up
dgm4 = function(m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1) {
GWAS_individual = dgm_individual_4(m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1)
GWAS_summary = dgm_summary_4(GWAS_individual)
return(GWAS_summary)
}
# parameters
m = 200
nx = 300; ny = 20000
a_gamma = -0.3; b_gamma = 0.3
a_f = 0.1; b_f = 0.3
a_alpha = -0.1; b_alpha = 0.1
a_phi = -0.05; b_phi = 0.05
# error_sd_exp = 1
q_uhp = 1; q_chp = 0
theta = 0
p_cutoff = 1e-3
# generate summary statistics
GWAS_summary = dgm4(m, nx, ny, a_gamma, b_gamma, a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp)
GWAS_summary$h2_exposure
GWAS_summary$h2_causal
GWAS_summary$h2_uhp
GWAS_summary$h2_chp
# get summary statistics
b_exp = c(GWAS_summary$b_exp); se_exp = c(GWAS_summary$se_exp)
b_out = c(GWAS_summary$b_out); se_out = c(GWAS_summary$se_out)
# example usage
fusiomr(b_exp, se_exp, b_out, se_out)
fusiomr(b_exp,se_exp,b_out,se_out,CHP=TRUE)
set.seed(123)
dgm_individual_4 = function (m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1) {
# IV-to-exposure effect (not through U)
gamma = runif(m, a_gamma, b_gamma)
# MAF
f = runif(m, a_f, b_f)
# Genotypes in [0, 1, 2], m x n
gx = replicate(nx, rbinom(n = m, size = 2, prob = f))
gy = replicate(ny, rbinom(n = m, size = 2, prob = f))
# for each row (snp), standardize genotype
gx = t(apply(gx, 1, base::scale))
gy = t(apply(gy, 1, base::scale))
# a proportion of snps have UHP effect (q_uhp)
alpha = runif(m, a_alpha, b_alpha)
valid_ids = sample(1:m, floor((1-q_uhp)*m))
alpha[valid_ids] = 0
# a proportion of snps have CHP effect (q_chp)
eta = rbinom(m, 1, q_chp)
ind_chp = which(eta == 1)
phi = rep(0, m)
phi[ind_chp] = runif(length(ind_chp), a_phi, b_phi)
# exposure and outcome
Ux = c(phi %*% gx) + rnorm(nx)
Uy = c(phi %*% gy) + rnorm(ny)
Xx = c(gamma %*% gx) + beta_XU * Ux + rnorm(nx)
Xy = c(gamma %*% gy) + beta_XU * Uy + rnorm(ny)
Y  = c(alpha %*% gy) + theta * Xy + beta_YU * Uy + rnorm(ny)
h2_exposure = var(c(gamma %*% gy))/var(Xy)
h2_causal = var(c(gamma %*% gy * theta))/var(Y)
h2_uhp = var(c(alpha %*% gy))/var(Y)
h2_chp = var(c(phi %*% gy * beta_YU))/var(Y)
# output
return(list(X = Xx, Y = Y, gx = gx, gy = gy, h2_exposure = h2_exposure,
h2_causal = h2_causal, h2_uhp = h2_uhp, h2_chp = h2_chp))
}
# generate summary statistics
dgm_summary_4 = function(GWAS_individual) {
gammaSS = fastSigLm(GWAS_individual$X, t(GWAS_individual$gx))
GammaSS = fastSigLm(GWAS_individual$Y, t(GWAS_individual$gy))
b_exp = gammaSS$coef; se_exp = gammaSS$std
b_out = GammaSS$coef; se_out = GammaSS$std
return(list(b_exp = b_exp, se_exp = se_exp, b_out = b_out, se_out = se_out,
h2_exposure = GWAS_individual$h2_exposure, h2_causal = GWAS_individual$h2_causal,
h2_uhp = GWAS_individual$h2_uhp, h2_chp = GWAS_individual$h2_chp))
}
# wrap up
dgm4 = function(m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1) {
GWAS_individual = dgm_individual_4(m, nx, ny, a_gamma, b_gamma,
a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp, beta_XU = 1, beta_YU = 1)
GWAS_summary = dgm_summary_4(GWAS_individual)
return(GWAS_summary)
}
# parameters
m = 200
nx = 300; ny = 20000
a_gamma = -0.3; b_gamma = 0.3
a_f = 0.1; b_f = 0.3
a_alpha = -0.1; b_alpha = 0.1
a_phi = -0.05; b_phi = 0.05
# error_sd_exp = 1
q_uhp = 1; q_chp = 0
theta = 0
p_cutoff = 1e-3
# generate summary statistics
GWAS_summary = dgm4(m, nx, ny, a_gamma, b_gamma, a_f, b_f, a_alpha, b_alpha, a_phi, b_phi, theta, q_uhp, q_chp)
GWAS_summary$h2_exposure
GWAS_summary$h2_causal
GWAS_summary$h2_uhp
GWAS_summary$h2_chp
# get summary statistics
b_exp = c(GWAS_summary$b_exp); se_exp = c(GWAS_summary$se_exp)
b_out = c(GWAS_summary$b_out); se_out = c(GWAS_summary$se_out)
# example usage
fusiomr(b_exp, se_exp, b_out, se_out)
fusiomr(b_exp, se_exp, b_out, se_out, CHP=TRUE)
devtools::load_all()
set.seed(123)
# function to generate two exposures two outcome GWAS summary statistics
# all IVs have UHP effect and some have CHP
# UHP effect size, CHP indicator for two outcomes are correlated
# function to generate two correlated uniform using Gaussian copula
gen.gauss.cop <- function(r, n){
rho <- 2 * sin(r * pi/6)        # Pearson correlation
P <- toeplitz(c(1, rho))        # Correlation matrix
d <- nrow(P)                    # Dimension
## Generate sample
U <- pnorm(matrix(rnorm(n*d), ncol = d) %*% chol(P))
return(U)
}
# function to map correlation to bi-Binomial prob.
bern_prob <- function(rho, p, q) {
p00 = rho * sqrt(p*q*(1-p)*(1-q)) + (1-p)*(1-q)
p10 = 1 - q - p00
p01 = 1 - p - p00
p11 = p + q + p00 -  1
return(c(p00, p01, p10, p11))
}
dgm_individual_6 = function (m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1,
a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha,
a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1=1, q_uhp2=1,
q_chp1=0.1, q_chp2=0.1, beta_XU=1, beta_YU=1) {
# IV-to-exposure effect (not through U)
gamma = gen.gauss.cop(rho_gamma, m)
gamma1 = a_gamma1 + (b_gamma1 - a_gamma1) * gamma[,1]
gamma2 = a_gamma2 + (b_gamma2 - a_gamma2) * gamma[,2]
# MAF
f1x = runif(m, a_f, b_f)
f1y = runif(m, a_f, b_f)
f2x = runif(m, a_f, b_f)
f2y = runif(m, a_f, b_f)
# Genotypes in [0, 1, 2], m x n
gx1 = replicate(nx1, rbinom(n = m, size = 2, prob = f1x))
gx2 = replicate(nx2, rbinom(n = m, size = 2, prob = f2x))
gy1 = replicate(ny1, rbinom(n = m, size = 2, prob = f1y))
gy2 = replicate(ny2, rbinom(n = m, size = 2, prob = f2y))
# for each row (snp), standardize genotype
gx1 = t(apply(gx1, 1, base::scale))
gx2 = t(apply(gx2, 1, base::scale))
gy1 = t(apply(gy1, 1, base::scale))
gy2 = t(apply(gy2, 1, base::scale))
# a proportion of snps have UHP effect (q_uhp)
alpha = gen.gauss.cop(rho_alpha, m)
alpha[,1] = a_alpha1 + (b_alpha1 - a_alpha1) * alpha[,1]
alpha[,2] = a_alpha2 + (b_alpha2 - a_alpha2) * alpha[,2]
valid_ids1 = sample(1:m, floor((1-q_uhp1)*m))
valid_ids2 = sample(1:m, floor((1-q_uhp2)*m))
alpha[valid_ids1, 1] = 0
alpha[valid_ids2, 2] = 0
alpha1 = alpha[,1]
alpha2 = alpha[,2]
# CHP
# eta, correlated Bernoulli
bernp = bern_prob(rho_eta, q_chp1, q_chp2)
d = rmultinom(m, 1, bernp)
# print(rowSums(d)/K)
eta = t(matrix(c(0,0,0,1,1,0,1,1), nrow = 2) %*% d)
# cor(eta)
# index of invalid IVs with CHP
ind1 = which(eta[,1] == 1)
ind2 = which(eta[,2] == 1)
# CHP effect
phi1 = phi2 = rep(0, m)
phi1[ind1] = runif(length(ind1), a_phi1, b_phi1)
phi2[ind2] = runif(length(ind2), a_phi2, b_phi2)
# exposure and outcome
Ux1 = c(phi1 %*% gx1) + rnorm(nx1)
Ux2 = c(phi2 %*% gx2) + rnorm(nx2)
Uy1 = c(phi1 %*% gy1) + rnorm(ny1)
Uy2 = c(phi2 %*% gy2) + rnorm(ny2)
Xx1 = c(gamma1 %*% gx1) + beta_XU * Ux1 + rnorm(nx1)
Xx2 = c(gamma2 %*% gx2) + beta_XU * Ux2 + rnorm(nx2)
Xy1 = c(gamma1 %*% gy1) + beta_XU * Uy1 + rnorm(ny1)
Xy2 = c(gamma2 %*% gy2) + beta_XU * Uy2 + rnorm(ny2)
Y1 = c(alpha1 %*% gy1) + theta1 * Xy1 + beta_YU * Uy1 + rnorm(ny1)
Y2 = c(alpha2 %*% gy2) + theta2 * Xy2 + beta_YU * Uy2 + rnorm(ny2)
# variance component
h2_exposure1 = var(c(gamma1 %*% gy1))/var(Xy1)
h2_exposure2 = var(c(gamma2 %*% gy2))/var(Xy2)
h2_causal1 = var(c(gamma1 %*% gy1 * theta1))/var(Y1)
h2_causal2 = var(c(gamma2 %*% gy2 * theta2))/var(Y2)
h2_uhp1 = var(c(alpha1 %*% gy1))/var(Y1)
h2_uhp2 = var(c(alpha2 %*% gy2))/var(Y2)
h2_chp1 = var(c(phi1 %*% gy1 * beta_YU))/var(Y1)
h2_chp2 = var(c(phi2 %*% gy2 * beta_YU))/var(Y2)
# output
return(list(X1 = Xx1, X2 = Xx2, Y1 = Y1, Y2 = Y2, gx1 = gx1, gx2 = gx2,
gy1 = gy1, gy2 = gy2, h2_exposure1 = h2_exposure1, h2_exposure2 = h2_exposure2,
h2_causal1 = h2_causal1, h2_causal2 = h2_causal2, h2_uhp1 = h2_uhp1, h2_uhp2 = h2_uhp2,
h2_chp1 = h2_chp1, h2_chp2 = h2_chp2))
}
# generate summary statistics
dgm_summary_6 = function(GWAS_individual) {
gammaSS1 = fastSigLm(GWAS_individual$X1, t(GWAS_individual$gx1))
gammaSS2 = fastSigLm(GWAS_individual$X2, t(GWAS_individual$gx2))
GammaSS1 = fastSigLm(GWAS_individual$Y1, t(GWAS_individual$gy1))
GammaSS2 = fastSigLm(GWAS_individual$Y2, t(GWAS_individual$gy2))
b_exp_1 = gammaSS1$coef; se_exp_1 = gammaSS1$std
b_exp_2 = gammaSS2$coef; se_exp_2 = gammaSS2$std
b_out_1 = GammaSS1$coef; se_out_1 = GammaSS1$std
b_out_2 = GammaSS2$coef; se_out_2 = GammaSS2$std
return(list(
b_exp_1 = b_exp_1, se_exp_1 = se_exp_1, b_exp_2 = b_exp_2, se_exp_2 = se_exp_2,
b_out_1 = b_out_1, se_out_1 = se_out_1, b_out_2 = b_out_2, se_out_2 = se_out_2,
h2_exposure1 = GWAS_individual$h2_exposure1, h2_exposure2 = GWAS_individual$h2_exposure2,
h2_causal1 = GWAS_individual$h2_causal1, h2_causal2 = GWAS_individual$h2_causal2,
h2_uhp1 = GWAS_individual$h2_uhp1, h2_uhp2 = GWAS_individual$h2_uhp2,
h2_chp1 = GWAS_individual$h2_chp1, h2_chp2 = GWAS_individual$h2_chp2))
}
# wrap up
dgm6 = function(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1,
a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha,
a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1=1, q_uhp2=1,
q_chp1=0.1, q_chp2=0.1, beta_XU=1, beta_YU=1) {
GWAS_individual = dgm_individual_6(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1,
a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha,
a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1, q_uhp2,
q_chp1, q_chp2, beta_XU, beta_YU)
GWAS_summary = dgm_summary_6(GWAS_individual)
return(GWAS_summary)
}
m = 200
nx1 = 20000; nx2 = 80000
ny1 = 20000; ny2 = 80000
a_gamma1 = -0.3; b_gamma1 = 0.3; a_gamma2 = -0.3; b_gamma2 = 0.3
rho_gamma = 0.6
a_f = 0.1; b_f = 0.3
a_alpha1 = -0.1; b_alpha1 = 0.1; a_alpha2 = -0.1; b_alpha2 = 0.1
rho_alpha = 0.6
a_phi1 = -0.1; b_phi1 = 0.1; a_phi2 = -0.1; b_phi2 = 0.1
rho_eta = 0.9
# error_sd_exp = 1
theta1 = 0; theta2 = 0
q_uhp1 = 1; q_uhp2 = 1
q_chp1 = 0.1; q_chp2 = 0.1
p_cutoff = 1e-5
a_prior = 5
# generate summary statistics
GWAS_summary = dgm6(m, nx1, nx2, ny1, ny2, a_gamma1, b_gamma1, a_gamma2, b_gamma2, rho_gamma, a_f, b_f, a_alpha1, b_alpha1, a_alpha2, b_alpha2, rho_alpha, a_phi1, b_phi1, a_phi2, b_phi2, rho_eta, theta1, theta2, q_uhp1, q_uhp2, q_chp1, q_chp2, beta_XU=1, beta_YU=1)
GWAS_summary$h2_exposure1; GWAS_summary$h2_exposure2
GWAS_summary$h2_causal1; GWAS_summary$h2_causal2
GWAS_summary$h2_uhp1; GWAS_summary$h2_uhp2
GWAS_summary$h2_chp1; GWAS_summary$h2_chp2
b_exp = cbind(GWAS_summary$b_exp_1, GWAS_summary$b_exp_2)
b_out = cbind(GWAS_summary$b_out_1, GWAS_summary$b_out_2)
se_exp = cbind(GWAS_summary$se_exp_1, GWAS_summary$se_exp_2)
se_out = cbind(GWAS_summary$se_out_1, GWAS_summary$se_out_2)
fusiomr(b_exp, se_exp, b_out, se_out)
devtools::lint()
devtools::load_all()
fusiomr(b_exp, se_exp, b_out, se_out, CHP=TRUE)
fusiomr(b_exp, se_exp, b_out, se_out, CHP=TRUE)
fusiomr(b_exp, se_exp, b_out, se_out, CHP=TRUE)
devtools::test()
devtools::clean_dll()
devtools::document()
devtools::install()
setwd("~/Desktop/Dr.Chen/FusioMR2/v5")
# Install devtools if you don't have it
install.packages("devtools")
# Install FusioMR from your GitHub repository
devtools::install_github("kangbw702/FusioMR")
wflow_git_config()
install.packages("workflowr")
wflow_git_config()
library(workflowr)
wflow_git_config()
getwd()
getwd()
setwd("~/tutorial")
getwd()
setwd("/Users/fengsihao/FusioMR/tutorial")
getwd()
wflow_start("tutorial", existing = TRUE)
workflowr::wflow_start(existing = TRUE)
setwd("/Users/fengsihao/FusioMR/tutorial")
workflowr::wflow_start(existing = TRUE)
getwd()
wflow_start("/Users/fengsihao/FusioMR/tutorial", existing=TRUE)
workflowr::wflow_build()
getwd()
getwd()
wflow_start("/Users/fengsihao/FusioMR/fusiomr", existing=TRUE)
workflowr::wflow_build()
workflowr::wflow_build()
wflow_build()
workflowr::wflow_build()
workflowr::wflow_build("analysis/", rebuild = TRUE)
workflowr::wflow_clean()
wflow_build()
wflow_build()
wflow_build()
wflow_build()
workflowr::wflow_build()
workflowr::wflow_build()
workflowr::wflow_build()
workflowr::wflow_build()
workflowr::wflow_build()
workflowr::wflow_build()
devtools::check()
rm -rf fusiomr/docs/.nojekyll
devtools::clean_dll()
devtools::document()
devtools::clean_dll()
devtools::document()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::install()
Sys.which("make")
install.packages("remotes")
remotes::install_github("kangbw702/FusioMR")
wflow_view()
wflow_publish(c("analysis/index.Rmd",
"analysis/software_tutorial.Rmd",
"analysis/data_analysis.Rmd",
"analysis/about.Rmd",
"analysis/license.Rmd",
"analysis/_site.yml",
"analysis/style.css"),
message = "Initial FusioMR website")
setwd("/Users/fengsihao/FusioMR")
system("git add fusiomr/analysis/")
system("git commit -m 'Add FusioMR website files'")
setwd("fusiomr")
wflow_publish(c("analysis/index.Rmd",
"analysis/software_tutorial.Rmd",
"analysis/data_analysis.Rmd",
"analysis/about.Rmd",
"analysis/license.Rmd",
"analysis/_site.yml",
"analysis/style.css"),
message = "Initial FusioMR website")
wflow_status()
wflow_publish(c("analysis/index.Rmd",
"analysis/software_tutorial.Rmd",
"analysis/data_analysis.Rmd",
"analysis/about.Rmd",
"analysis/license.Rmd",
"analysis/_site.yml",
"analysis/style.css"),
message = "Initial FusioMR website")
wflow_git_push()
install.packages("gitcreds")
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
setwd("/Users/fengsihao/FusioMR/fusiomr")
wflow_git_push()
setwd("/Users/fengsihao/FusioMR/fusiomr")
wflow_build()
getwd()
find ~ -name "FusioMR_web" -type d 2>/dev/null
library(workflowr)
wflow_build()
wflow_build()
wflow_publish("analysis/*", "publish site")
workflowr::wflow_build()
workflowr::wflow_publish("index.Rmd", republish = TRUE)
workflowr::wflow_build()
workflowr::wflow_build(republish = TRUE)
workflowr::wflow_publish(all = TRUE, message = "Full rebuild")
getwd()
list.files()
getwd（）
setwd("/Users/fengsihao/Desktop/FusioMR_web")
getwd()
/Users/fengsihao/Desktop/FusioMR_web
ls
packageVersion("Rcpp")
packageVersion("RcppArmadillo")
packageVersion("stats")
devtools::clean_dll()
devtools::document()
devtools::build()
devtools::install()
devtools::install()
devtools::check()
getwd()
devtools::check()
devtools::test()
devtools::test()
getwd()
list.files()
devtools::test()
devtools::document()
file.exists("DESCRIPTION")
devtools::check_description()
devtools::load_all()
devtools::document()
devtools::install_github("kangbw702/FusioMR")
b_exp <- c(0.12, 0.08, 0.15, 0.09)    # IV-exposure effects
se_exp <- c(0.01, 0.01, 0.02, 0.01)   # IV-exposure standard errors
b_out <- c(0.05, 0.03, 0.07, 0.04)    # IV-outcome effects
se_out <- c(0.02, 0.02, 0.03, 0.02)
library(FusioMR)
fusiomr(b_exp, se_exp, b_out, se_out)
# Or if you have devtools loaded
devtools::clean_dll()
devtools::load_all()
devtools::document()
